@page "/Deposit/{Name}"
@using BusinessLogic.DTOs
@using BusinessLogic.Services
@using UI.Data
@using UI.Pages.Components
@inherits AuthEnforce
@inject UserController User
@inject DepositService DepositService
@inject PromotionService PromotionService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

@code {
    private DepositDto DepositDto { get; set; }
    private List<PromotionDto> Promotions { get; set; } = new();
    private List<DateRangeDto> AvailabilityPeriods { get; set; } = new();

   private DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
   private DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(1));

    private string? _name;
    
    [Parameter]
    public string Name
    {
        get => _name ?? throw new NullReferenceException();
        set => _name = value;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        try
        {
            DepositDto = DepositService.GetDeposit(Name);
            Promotions = DepositDto.Promotions.Select(p => PromotionService.GetPromotion(p.Id)).ToList();
            AvailabilityPeriods = DepositDto.AvailabilityPeriods;
            AvailabilityPeriods.Sort((a, b) => a.StartDate.CompareTo(b.StartDate));
        }
        catch (ArgumentException e)
        {
            NotificationService.ShowError(e.Message);
            NavigationManager.NavigateTo("/Deposits");
        }
        StateHasChanged();
    }

    private void UpdateDepositAndPeriods()
    {
        DepositDto = DepositService.GetDeposit(Name);
        AvailabilityPeriods = DepositDto.AvailabilityPeriods;
        AvailabilityPeriods.Sort((a, b) => a.StartDate.CompareTo(b.StartDate));
    }

    private void DeleteDeposit()
    {
        try
        {
            DepositService.DeleteDeposit(Name, User.CurrentCredentials);
            NotificationService.ShowMessage($"Deposit '{Name}' deleted successfully.");
            NavigationManager.NavigateTo("/Deposits");
        }
        catch (ArgumentException e)
        {
            NotificationService.ShowError(e.Message);
        }
    }

    private void AddAvailability()
    {
        try
        {
            var dateRange = new DateRangeDto { StartDate = StartDate, EndDate = EndDate };
            DepositService.AddAvailabilityPeriod(Name, dateRange, User.CurrentCredentials);
            NotificationService.ShowMessage("Deposit availability period added successfully.");
            UpdateDepositAndPeriods();
            StateHasChanged();
        }
        catch (ArgumentException e)
        {
            NotificationService.ShowError(e.Message);
        }
    }
    
    private void OnBookingCompleted()
        {
            UpdateDepositAndPeriods();
        }

}

<main class="responsive">
    <NavLink class="extra transparent vertical-margin left-align" href="/Deposits">
        <i>arrow_back</i>
    </NavLink>
    <h6 class="vertical-margin" id="deposit">
        @Name
        @if (User.IsAdmin)
        {
            <div class="absolute right">
                <button class="extend square round no-margin" data-ui="#add-availability">
                    <i>add</i>
                    <span>Add Availability</span>
                </button>
                <button class="extend square round error no-margin" @onclick="DeleteDeposit">
                    <i>delete</i>
                    <span>Delete</span>
                </button>
                <div class="medium-space"></div>
            </div>
        }
    </h6>
    <article>
        <h6 class="small padding">Area:&nbsp; <b>@DepositDto.Area</b></h6>
        <div class="divider"></div>
        <h6 class="small padding">Size:&nbsp; <b>@DepositDto.Size</b></h6>
        <div class="divider"></div>
        <h6 class="small padding">Climate Control:&nbsp; <b>@(DepositDto.ClimateControl ? "Yes" : "No")</b></h6>
        <div class="divider"></div>
        @if (Promotions.Count == 0)
        {
            <h6 class="small padding">There are no available promotions for this deposit</h6>
        }
        else
        {
            <h6 class="small padding">There are the following promotions available for this deposit:</h6>
            @foreach (var promotion in Promotions)
            {
                <div class="button no-wave margin">
                    @promotion.Label
                    <div class="badge none">-@promotion.Discount%</div>
                </div>
            }
        }
        <div class="divider"></div>
        @if (AvailabilityPeriods.Count == 0)
                {
                    <h6 class="small padding">There are no available periods for this deposit</h6>
                }
                else
                {
                    <h6 class="small padding">There are the following periods available for this deposit:</h6>
                    @foreach (var period in AvailabilityPeriods)
                    {
                        <div class="button no-wave margin">
                            @period.StartDate.ToString("dd/MM/yyyy") - @period.EndDate.ToString("dd/MM/yyyy")
                        </div>
                    }
                }
    </article>
    <div class="small-space"></div>
    <h6 class="vertical-margin">Book now</h6>
    <DepositBooking DepositName="@Name" OnBookingCompleted="OnBookingCompleted"/>
</main>

@if (User.IsAdmin)
{
    <div class="medium-space"></div>
    <div class="overlay blur"></div>
    <dialog class="medium-width no-elevate" id="add-availability">
        <div class="s12 m6 padding">
            <h6 class="small">Select the dates you want to add availability for:</h6>
            <div class="small-space"></div>
            <div class="field label suffix border">
                <input type="date" @bind=StartDate>
                <label>From</label>
                <i>calendar_today</i>
            </div>
            <div class="field label suffix border">
                <input type="date" @bind=EndDate>
                <label>To</label>
                <i>event_upcoming</i>
            </div>
        </div>
        <nav class="right-align no-space no-margin">
            <button class="transparent link" data-ui="#add-availability">Cancel</button>
            <button class="transparent link" @onclick="AddAvailability">Confirm</button>
        </nav>    
    </dialog>
}